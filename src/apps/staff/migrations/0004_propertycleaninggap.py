# Generated by Django 4.2.11 on 2025-09-14 21:55

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('reservation', '0020_add_price_temperature_pool_field'),
        ('property', '0041_latecheckoutconfig'),
        ('staff', '0003_alter_worktask_staff_member'),
    ]

    operations = [
        migrations.CreateModel(
            name='PropertyCleaningGap',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When the instance was created.', verbose_name='created at')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The last time at the instance was modified.', verbose_name='updated at')),
                ('deleted', models.BooleanField(default=False, help_text='It can be set to false, usefull to simulate deletion')),
                ('gap_date', models.DateField(help_text='Día en que la propiedad quedó sin limpieza', verbose_name='Fecha sin limpieza')),
                ('reason', models.CharField(choices=[('staff_overload', 'Sobrecarga de personal'), ('no_staff_available', 'Sin personal disponible'), ('capacity_exceeded', 'Capacidad máxima excedida'), ('weekend_unavailable', 'Personal no disponible en fin de semana')], default='staff_overload', max_length=30, verbose_name='Razón del gap')),
                ('original_required_date', models.DateField(help_text='Fecha en que originalmente se necesitaba la limpieza', verbose_name='Fecha original requerida')),
                ('rescheduled_date', models.DateField(blank=True, help_text='Nueva fecha cuando se programó la limpieza', null=True, verbose_name='Fecha reprogramada')),
                ('resolved', models.BooleanField(default=False, help_text='Si la limpieza fue finalmente asignada', verbose_name='Resuelto')),
                ('notes', models.TextField(blank=True, verbose_name='Notas adicionales')),
                ('building_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cleaning_gaps', to='property.property', verbose_name='Propiedad')),
                ('reservation', models.ForeignKey(blank=True, help_text='Reserva que requería limpieza este día', null=True, on_delete=django.db.models.deletion.CASCADE, to='reservation.reservation', verbose_name='Reserva relacionada')),
            ],
            options={
                'verbose_name': 'Gap de Limpieza',
                'verbose_name_plural': 'Gaps de Limpieza',
                'ordering': ['-gap_date'],
                'unique_together': {('building_property', 'gap_date', 'reason')},
            },
        ),
    ]
